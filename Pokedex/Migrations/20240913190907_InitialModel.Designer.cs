// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PokeAPI.Models;

#nullable disable

namespace Blog.Migrations
{
    [DbContext(typeof(PokedexContext))]
    [Migration("20240913190907_InitialModel")]
    partial class InitialModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PokeAPI.Models.Generation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeletedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Generations");
                });

            modelBuilder.Entity("PokeAPI.Models.Pokemon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseStatsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeletedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EvolvesFrom")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<Guid>("IntroducedInId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MainTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MaxStatsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MinStatsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SecondTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseStatsId")
                        .IsUnique();

                    b.HasIndex("EvolvesFrom")
                        .IsUnique()
                        .HasFilter("[EvolvesFrom] IS NOT NULL");

                    b.HasIndex("IntroducedInId");

                    b.HasIndex("MainTypeId");

                    b.HasIndex("MaxStatsId")
                        .IsUnique();

                    b.HasIndex("MinStatsId")
                        .IsUnique();

                    b.HasIndex("SecondTypeId");

                    b.ToTable("Pokemons");
                });

            modelBuilder.Entity("PokeAPI.Models.Stats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Attack")
                        .HasColumnType("int");

                    b.Property<int>("AttackSpeed")
                        .HasColumnType("int");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.Property<int>("DefenseSpeed")
                        .HasColumnType("int");

                    b.Property<string>("DeletedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HP")
                        .HasColumnType("int");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("PokeAPI.Models.Type", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeletedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("PokeAPI.Models.TypeEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttackerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeletedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Multiplier")
                        .HasColumnType("real");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttackerId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("TypeEffects");
                });

            modelBuilder.Entity("PokeAPI.Models.Pokemon", b =>
                {
                    b.HasOne("PokeAPI.Models.Stats", null)
                        .WithOne()
                        .HasForeignKey("PokeAPI.Models.Pokemon", "BaseStatsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PokeAPI.Models.Pokemon", null)
                        .WithOne()
                        .HasForeignKey("PokeAPI.Models.Pokemon", "EvolvesFrom")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PokeAPI.Models.Generation", "IntroducedIn")
                        .WithMany()
                        .HasForeignKey("IntroducedInId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PokeAPI.Models.Type", "MainType")
                        .WithMany()
                        .HasForeignKey("MainTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PokeAPI.Models.Stats", null)
                        .WithOne()
                        .HasForeignKey("PokeAPI.Models.Pokemon", "MaxStatsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PokeAPI.Models.Stats", null)
                        .WithOne()
                        .HasForeignKey("PokeAPI.Models.Pokemon", "MinStatsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PokeAPI.Models.Type", "SecondType")
                        .WithMany()
                        .HasForeignKey("SecondTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("IntroducedIn");

                    b.Navigation("MainType");

                    b.Navigation("SecondType");
                });

            modelBuilder.Entity("PokeAPI.Models.TypeEffect", b =>
                {
                    b.HasOne("PokeAPI.Models.Type", "Attacker")
                        .WithMany()
                        .HasForeignKey("AttackerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PokeAPI.Models.Type", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attacker");

                    b.Navigation("Receiver");
                });
#pragma warning restore 612, 618
        }
    }
}
